package strategy

import (
	"context"
	"time"
)

// MarketData represents processed market data from the market-streaming service
type MarketData struct {
	Symbol    string
	Price     float64
	Volume    float64
	Timestamp time.Time
	// Add other relevant market data fields
}

// Signal represents a trading signal generated by a strategy
type Signal struct {
	Symbol      string
	Action      SignalAction
	Price       float64
	Quantity    float64
	Confidence  float64    // Optional confidence score of the signal
	GeneratedAt time.Time
	ExpiresAt   time.Time  // Optional expiration time for the signal
	Metadata    map[string]interface{} // Additional strategy-specific metadata
}

// SignalAction represents the type of trading action to take
type SignalAction string

const (
	SignalActionBuy    SignalAction = "BUY"
	SignalActionSell   SignalAction = "SELL"
	SignalActionHold   SignalAction = "HOLD"
)

// Strategy defines the interface that all trading strategies must implement
type Strategy interface {
	// Initialize sets up any necessary resources for the strategy
	Initialize(ctx context.Context) error

	// ProcessData processes new market data and potentially generates signals
	ProcessData(ctx context.Context, data MarketData) (*Signal, error)

	// Name returns the unique identifier for this strategy
	Name() string

	// Parameters returns the current parameter settings of the strategy
	Parameters() map[string]interface{}

	// UpdateParameters allows dynamic updates to strategy parameters
	UpdateParameters(params map[string]interface{}) error

	// Cleanup performs any necessary cleanup when the strategy is stopped
	Cleanup(ctx context.Context) error
}

// SignalHandler defines the interface for components that process generated signals
type SignalHandler interface {
	// HandleSignal processes a trading signal
	HandleSignal(ctx context.Context, signal *Signal) error
}
